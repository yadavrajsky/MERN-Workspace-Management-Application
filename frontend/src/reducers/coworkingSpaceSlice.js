import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import axios from "axios";

// Async thunks for CRUD operationsos';
export const fetchCoworkingSpaces = createAsyncThunk(
  'coworkingSpaces/fetchCoworkingSpaces',
  async (filters, { rejectWithValue, getState }) => {
    try {

      // Clean up filters: Remove properties that are null, undefined, or empty
      const cleanedFilters = Object.fromEntries(
        Object.entries(filters).filter(([key, value]) =>
          value !== null && value !== undefined && value !== ''
        )
      );

      // Construct query parameters from cleaned filters
      const queryParams = new URLSearchParams(cleanedFilters).toString();

      // Make the API request with filters
      const response = await axios.get(`/api/v1/coworkingSpaces?${queryParams}`);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response?.data || 'Something went wrong');
    }
  }
);


export const fetchCoworkingSpaceById = createAsyncThunk(
  "coworkingSpaces/fetchCoworkingSpaceById",
  async (id, { rejectWithValue }) => {
    try {
      const response = await axios.get(`/api/v1/coworkingSpace/${id}`);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

export const createCoworkingSpace = createAsyncThunk(
  "coworkingSpaces/createCoworkingSpace",
  async (coworkingSpaceData, { rejectWithValue }) => {
    try {
      const response = await axios.post(
        "/api/v1/coworkingSpace",
        coworkingSpaceData
      );
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

export const updateCoworkingSpace = createAsyncThunk(
  "coworkingSpaces/updateCoworkingSpace",
  async ({ id, updatedDraftCoworkingSpace }, { rejectWithValue }) => {
    try {
      const response = await axios.put(
        `/api/v1/coworkingSpace/${id}`,
        updatedDraftCoworkingSpace
      );
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

export const deleteCoworkingSpace = createAsyncThunk(
  "coworkingSpaces/deleteCoworkingSpace",
  async (id, { rejectWithValue }) => {
    try {
      const response = await axios.delete(`/api/v1/coworkingSpace/${id}`);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

// Initial state
const initialState = {
  coworkingSpaces: [],
  selectedCoworkingSpace: null,
  loading: false,
  error: null,
  message: null,
  draftCoworkingSpace: null,
};

// Create coworkingSpaceSlice
const coworkingSpaceSlice = createSlice({
  name: "coworkingSpaces",
  initialState,
  reducers: {
    resetNotificationState: (state) => {
      state.error = null;
      state.message = null;
    },
    setSelectedCoworkingSpace: (state, action) => {
      state.selectedCoworkingSpace = action.payload;
    },

    //Create draftObject

    createDraftCoworkingSpace: (state) => {
      const emptyCoworkingSpace = {
        stage:1,
        id: "", // This will be automatically generated by uuidv4
        name: "",
        location: {
          city: null,
          locality: "",
        },
        productType: null,
        amenities: [],
        spaceType: "", // Must be either "Coworking Space" or "Work Cafe"
        seatType: [],
        brand: null,
        creditsPerDeskPerMonth: 0,
        photos: [],
        supportsParking: false,
        supportsMetroConnectivity: false,
      };

      state.draftCoworkingSpace = emptyCoworkingSpace;
    },

    //Update draftObject
    updateDraftCoworkingSpace: (state, action) => {
      state.draftCoworkingSpace = action.payload;
    },

    updateDraftCoworkingSpaceFiles: (state, action) => {
    state.draftCoworkingSpace.photos = [...state.draftCoworkingSpace.photos,...action.payload?.photos];
    },
    //reset draftObject
    resetDraftCoworkingSpace: (state) => {
      state.draftCoworkingSpace = null;
    },

    removePhotoFromDraftCoworkingSpace: (state, action) => {
      const photoId = action.payload;
      state.draftCoworkingSpace.photos = state.draftCoworkingSpace.photos.filter(
        (photo) => photo._id !== photoId
      );
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchCoworkingSpaces.pending, (state) => {
        state.loading = true;
        state.error = null;
        state.message = null;
      })
      .addCase(fetchCoworkingSpaces.fulfilled, (state, action) => {
        state.loading = false;
        state.coworkingSpaces = action.payload.coworkingSpaces;
      })
      .addCase(fetchCoworkingSpaces.rejected, (state, action) => {
        state.loading = false;
        action.payload.success === false
          ? (state.error = action.payload.message)
          : (state.error = action.payload.error);
      })
      .addCase(fetchCoworkingSpaceById.pending, (state) => {
        state.loading = true;
        state.error = null;
        state.message = null;
      })
      .addCase(fetchCoworkingSpaceById.fulfilled, (state, action) => {
        state.loading = false;
        state.selectedCoworkingSpace = {...action.payload.coworkingSpace};
      
      })
      .addCase(fetchCoworkingSpaceById.rejected, (state, action) => {
        state.loading = false;
        action.payload.success === false
          ? (state.error = action.payload.message)
          : (state.error = action.payload.error);
      })
      .addCase(createCoworkingSpace.pending, (state) => {
        state.loading = true;
        state.error = null;
        state.message = null;
      })
      .addCase(createCoworkingSpace.fulfilled, (state, action) => {
        state.loading = false;
        state.message = action.payload.message;
        state.coworkingSpaces.push(action.payload.coworkingSpace);
      })
      .addCase(createCoworkingSpace.rejected, (state, action) => {
        state.loading = false;
        action.payload.success === false
          ? (state.error = action.payload.message)
          : (state.error = action.payload.error);
      })
      .addCase(updateCoworkingSpace.pending, (state) => {
        state.loading = true;
        state.error = null;
        state.message = null;
      })
      .addCase(updateCoworkingSpace.fulfilled, (state, action) => {
        state.loading = false;
        state.message = action.payload.message;
      })
      .addCase(updateCoworkingSpace.rejected, (state, action) => {
        state.loading = false;
        action.payload.success === false
          ? (state.error = action.payload.message)
          : (state.error = action.payload.error);
      })
      .addCase(deleteCoworkingSpace.pending, (state) => {
        state.loading = true;
        state.error = null;
        state.message = null;
      })
      .addCase(deleteCoworkingSpace.fulfilled, (state, action) => {
        state.loading = false;
        state.message = action.payload.message;
      })
      .addCase(deleteCoworkingSpace.rejected, (state, action) => {
        state.loading = false;
        action.payload.success === false
          ? (state.error = action.payload.message)
          : (state.error = action.payload.error);
      });
  },
});

export const { resetNotificationState, setSelectedCoworkingSpace,
    createDraftCoworkingSpace,
    updateDraftCoworkingSpace,
    resetDraftCoworkingSpace,
    updateDraftCoworkingSpaceFiles,
    removePhotoFromDraftCoworkingSpace

 } =
  coworkingSpaceSlice.actions;

export default coworkingSpaceSlice.reducer;
